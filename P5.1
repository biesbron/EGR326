/****************************************************************
* Lab One:     Interfacing with a Real Time Clock (RTC) IC Using
*              An I2C Bus
* Author:      Naim and Mazidi
* Adapter:     Kasonde Musonda
* Date:        10/09/2020
* Professor:   Dr. Brian Krug
* Description: This is an adaption of the algorithm used to set
*              the date/time/year of the DS1337 using burst write.
*              The algorhym also readds from the DS3231 and prints
*              to the console of the IDE - CCS.
****************************************************************/
#include "msp.h"
#include <stdio.h>
#include <string.h>

#define SLAVE_ADD 0x68          //Address of DS3231
#define PORTSCL P6              //SCL Port
#define SCL     BIT5
#define PORTSDA P6              //SDA Port
#define SDA     BIT4
#define KEYPAD P4               //Define Macros
#define BANK   0x7F

const int STAR_KEY =11;          //Star key on the keypad.
const int POUND_KEY= 12;         //Pound key on the keypad.
const int ZERO_KEY=0;            //Zero key on the keypad.
int const numKey = 13;           //13 is a number constantly returned by the keypad function.
uint8_t userKey=0;               //Value from the keypad
int count=0;                     //counter for state machine traverse.

unsigned char dataRX[19];        //Receive data bank
unsigned char dataTX[15];        //Array for data transmission.

enum states {secs,mins,hour,dayOfWeek,date,month,year,txRTC,rxRTC};
enum states current = secs;

/*Function Prototype*/
void pins_Init(void);
void init_12c(void);
void delay_Milli(int milli);
void delay_Micro(int micro);
int Burst_Write(int slaveAdd,unsigned char memAdd,int byteCount,unsigned char* data);
int Burst_Read(int slaveAdd, unsigned char memAdd, int byteCount,unsigned char* data);
uint8_t Read_Keypad(void);
void dataCollect(void);
void dataTransferFunction(void);
char* dayOfTheWeek(int day);

/*Configures the pins P4.0 and
 *P6.1 for UCB1.
 *@Param:void
 *@Return:void
 */
void pins_Init(void){

    PORTSCL->SEL0 |= SCL;       //CSL Line
    PORTSCL->SEL1 &= ~SCL;

    PORTSDA->SEL0 |= SDA;       //SDA Line
    PORTSDA->SEL1 &= ~SDA;

    KEYPAD->SEL0 &= ~BANK;     //sets all buttons from keypad to input.
    KEYPAD->SEL1 &= ~BANK;
    KEYPAD->DIR &= ~BANK;
    KEYPAD->REN |=  BANK;
    KEYPAD->OUT |=  BANK;

    SysTick -> CTRL = 0;            //Disable systick during step
    SysTick -> LOAD = 0x00FFFFFF;   //max reload value
    SysTick -> VAL = 0;             //clears it
    SysTick -> CTRL = 0x00000005;   //enables systick 3MHz no interrupts
}

/*Initialization and configuration of UCB1
 *For  TX/RX of the signal.
 */
void init_I2C(void){
    EUSCI_B1->CTLW0 |= 1;        //Disable UCB1 during config.
    EUSCI_B1->CTLW0  = 0x0F81;   //7 Bit-Slave ADDR, Master, I2C Synch Mode, SMCLK.
    EUSCI_B1->BRW    =30;        //CLK Prescaler 3MHz, 30=100KHz
    EUSCI_B1->CTLW0 &= ~1;       //enable UCB1 after Config.
}

/*Delay in micro seconds using SysTick Timer
 *@Param:int
 *@Return:void
 */
void delay_Micro(int micro){
    SysTick->LOAD = (3*micro)-1;
    SysTick->VAL = 0;
    while((SysTick->CTRL & 0x10000)==0){}
}

/*Delay in milliseconds using SysTick Timer
 *@Param:int
 *@Return:void
 */
void delay_Milli(int milli){
    SysTick->LOAD = (3000*milli)-1;
    SysTick->VAL = 0;
    while((SysTick->CTRL & 0x10000)==0){}
}
/*Use of burst write to write data to consecutive
 *memory locations.
 *@Return: int
 *@Param: int,unsigned char,int, unsigned char*
 */
int Burst_Write(int slaveAdd,unsigned char memAdd,int byteCount,unsigned char* data){
    if(byteCount <= 0)
        return -1;

        EUSCI_B1->I2CSA  = slaveAdd;      //Setup slave address.
        EUSCI_B1->CTLW0 |= 0x0010;        //Enable transmitter.
        EUSCI_B1->CTLW0 |= 0x0002;        //Generate START and send slave address.
        while(!(EUSCI_B1->IFG & 2)){}      //Delay till the ready for transmission.
        EUSCI_B1->TXBUF = memAdd;         //Tx memory address to slave device - DS1337.

        do{
            while(!(EUSCI_B1->IFG & 2)){} //Time delay untill ready to transmit.
            EUSCI_B1->TXBUF = *data++;    //Sends data to DS1337.
            byteCount--;
        }while(byteCount >0);

        while(!( EUSCI_B1->IFG & 2)){}      //Delay till last transmission is successful
        EUSCI_B1->CTLW0 |= 0x0004;         //Sends the stop bit.
        while(EUSCI_B1->CTLW0 & 4){}        //Delay till STOP bit sent.

        return 0;
}

/*Use of burst read to read from the DS1337 from consecutive locations
 *read: S-(SlaveADD+W) - ACK-memADD-(slaveAdd)-ACK-data-ACK...-data-NACK-P
 * @Param:int,unsigned char,int, unsigned char*
 * @Return: int
 */
int Burst_Read(int slaveAdd, unsigned char memAdd, int byteCount,unsigned char* data){

    if(byteCount <= 0)
        return -1;

    EUSCI_B1->I2CSA  = slaveAdd;      //Setup slave address.
    EUSCI_B1->CTLW0 |= 0x0010;        //Enable transmitter.
    EUSCI_B1->CTLW0 |= 0x0002;        //Generate START and send slave address.

    while(EUSCI_B1->CTLW0 & 2){}      //Wait till transmission is complete.
    EUSCI_B1->TXBUF  = memAdd;        //Send memory address to DS1337.
    while(!(EUSCI_B1->IFG & 2)){}       //Wait till last transmit is complete.
    EUSCI_B1->CTLW0 &= ~0x0010;       //Enable receiver.
    EUSCI_B1->CTLW0 |= 0x0002;        //generate RESTART and send slave address.
    while(!(EUSCI_B1->IFG & 2)){}       //Wait till RESTART is complete.

    do{
        if(byteCount==1)                 //When only one byte of data is left.
            EUSCI_B1->CTLW0 |= 0x0004;   //Setup to send STOP after the last bit is received.
        while(!(EUSCI_B1->IFG & 1)){}     //Wait till data is received.
        *data++ = EUSCI_B1->RXBUF;       //Read the received data.
        byteCount--;
    }while(byteCount);

    while(EUSCI_B1->CTLW0 & 4){}         //Wait till STOP is sent.

    return 0;
}

/*
 *This function checks for a button press on the keypad
 *and returns an integer to the main function
 *to which button was pressed.
 *@Return: uint8_t
 *@Param: void
 */
uint8_t Read_Keypad(){

 int i = 0; //variable initialization
 for(i=0; i<=2; i++){  //cycles through columns on keypad (code from lecture slides)

    KEYPAD->DIR |= (0x01 << i);
    KEYPAD->OUT &= ~(0x01 << i);

   delay_Micro(10);  //Signal settles!


  if(!(KEYPAD->IN & BIT3)){  //checks if button in row 0 is pressed

      if(i==0){
          while(!(KEYPAD->IN & BIT3)){}
          return 1;
      }
      if(i==1){
          while(!(KEYPAD->IN & BIT3)){}
          return 2;
      }
      if(i==2){
          while(!(KEYPAD->IN & BIT3)){}
          return 3;
      }
  }
  if(!(KEYPAD->IN & BIT4)){     //Checks row 2 for button push.

       if(i==0){
           while(!(KEYPAD->IN & BIT4)){}
           return 4;
       }
       if(i==1){
           while(!(KEYPAD->IN & BIT4)){}
           return 5;
       }
       if(i==2){
           while(!(KEYPAD->IN & BIT4)){}
           return 6;
       }
  }
  if(!(KEYPAD->IN & BIT5)){ //Checks Row 3 for button push.

       if(i==0){
           while(!(KEYPAD->IN & BIT5)){}
           return 7;
       }
       if(i==1){
           while(!(KEYPAD->IN & BIT5)){}
           return 8;
       }
       if(i==2){
           while(!(KEYPAD->IN & BIT5)){}
           return 9;
       }
  }
  if(!(KEYPAD->IN & BIT6)){ //Check row 4 for button push.

       if(i==0){
           while(!(KEYPAD->IN & BIT6)){}
           return 11;       //Star Key
       }
       if(i==1){
           while(!(KEYPAD->IN & BIT6)){}
           return 0;
       }
       if(i==2){
           while(!(KEYPAD->IN & BIT6)){}
           return 12;       //pound Key
       }

       }
      KEYPAD->DIR &= ~(0x01<< i); //turns columns back to high input state
      KEYPAD->OUT |= (0x01<< i);
 }
 return 13;
}

/*Data transfer function from to and fron the RTC
 *@Param: void
 *@Return: void
 */
void dataTransferFunction(){

    uint8_t tempDataTX[2]={0,0};     //Temp Array.
    uint8_t readMon;                 //Month from the RTC module.
    uint8_t readDate;                //Date from the RTC module.
    uint8_t readYear;                 //Year from the RTC module.
    uint8_t readSec;                 //Seconds from the RTC module.
    uint8_t readMins;                //Mins from the RTC module.
    uint8_t readHour;                //Hours from the RTC module.
    int day;                         //Day of the week.
    int index=0;                     //count for reverse storage.
    int shift=4;

    // readMonth,readYear,readDate,readSecs,readMins,readHours,temperature;
    switch(current){
        case secs:

            printf("\nLab 5: Interfacing the RTC to MSP432\n");
            printf("Please enter seconds (SS):\n");

            userKey = Read_Keypad();           //Reads data from the Keypad.
                while(userKey != POUND_KEY){   //Program halts once the # on keypad is pressed.
                    if(userKey != numKey && userKey != STAR_KEY){
                       tempDataTX[index]=userKey;
                       index++;
                    }
                    userKey=Read_Keypad();      //Reads the keypad again to repeat the process.
                }
                dataTX[0]= tempDataTX[0]<< shift|tempDataTX[1];
                printf("Entered seconds: %x%x\n",tempDataTX[0],tempDataTX[1]);
                printf("Please enter minutes!\n");
                index=0;           //Resets the index.
                current=mins;      //Sets the next state machine.
            break;

        case mins:
           userKey = Read_Keypad();
            while(userKey != POUND_KEY){         //Program halts once the # on keypad is pressed.
                if(userKey != numKey && userKey != STAR_KEY){
                    tempDataTX[index]=userKey;
                    index++;
                }
                userKey=Read_Keypad();          //Reads the keypad again to repeat the process.
            }
            dataTX[1]= tempDataTX[0]<< shift|tempDataTX[1];
            printf("Entered minutes: %x%x\n",tempDataTX[0],tempDataTX[1]);
            printf("Please enter hours!\n");
            current=hour;
            index=0;
            break;

        case hour:
            userKey = Read_Keypad();
             while(userKey != POUND_KEY){         //Program halts once the # on keypad is pressed.
                 if(userKey != numKey && userKey != STAR_KEY){
                     tempDataTX[index]=userKey;
                     index++;
                 }
                 userKey=Read_Keypad();          //Reads the keypad again to repeat the process.
             }
             dataTX[2]= tempDataTX[0]<< shift|tempDataTX[1];
             printf("Entered hours: %x%x\n",tempDataTX[0],tempDataTX[1]);
             printf("Please enter day of week!\n");
             current=dayOfWeek;
             index=0;
             break;

        case dayOfWeek:
            userKey = Read_Keypad();
             while(userKey != POUND_KEY){         //Program halts once the # on keypad is pressed.
                 if(userKey != numKey && userKey != STAR_KEY){
                     tempDataTX[index]=userKey;
                     index++;
                 }
                 userKey=Read_Keypad();          //Reads the keypad again to repeat the process.
             }
             dataTX[3]= tempDataTX[0];
             printf("Entered day of the week: %x\n",tempDataTX[0]);
             printf("Please enter date!\n");
             current=date;
             index=0;
             break;

        case date:
            userKey = Read_Keypad();
             while(userKey != POUND_KEY){         //Program halts once the # on keypad is pressed.
                 if(userKey != numKey && userKey != STAR_KEY){
                     tempDataTX[index]=userKey;
                     index++;
                 }
                 userKey=Read_Keypad();          //Reads the keypad again to repeat the process.
             }
             dataTX[4]= tempDataTX[0]<< shift|tempDataTX[1];
             printf("Entered date: %x%x\n",tempDataTX[0],tempDataTX[1]);
             printf("Please enter month!\n");
             current=month;
             index=0;
             break;

        case month:
            userKey = Read_Keypad();
             while(userKey != POUND_KEY){         //Program halts once the # on keypad is pressed.
                 if(userKey != numKey && userKey != STAR_KEY){
                     tempDataTX[index]=userKey;
                     index++;
                 }
                 userKey=Read_Keypad();          //Reads the keypad again to repeat the process.
             }
             dataTX[5]= tempDataTX[0]<< shift|tempDataTX[1];
             printf("Entered month: %x%x\n",tempDataTX[0],tempDataTX[1]);
             printf("Please enter year!\n");
             current=year;
             index=0;
             break;

        case year:
            userKey = Read_Keypad();
             while(userKey != POUND_KEY){         //Program halts once the # on keypad is pressed.
                 if(userKey != numKey && userKey != STAR_KEY){
                     tempDataTX[index]=userKey;
                     index++;
                 }
                 userKey=Read_Keypad();          //Reads the keypad again to repeat the process.
             }
             dataTX[6]= tempDataTX[0]<< shift|tempDataTX[1];
             printf("Entered year: %x%x\n",tempDataTX[0],tempDataTX[1]);
             current=txRTC;
             break;

        case txRTC:
            init_I2C();
            Burst_Write(SLAVE_ADD,0,7,dataTX);
            current=rxRTC;
            break;
        case rxRTC:
            init_I2C();
            Burst_Read(SLAVE_ADD, 0, 18, dataRX);
            delay_Milli(250);

            //User Initiated prompts.
            if(Read_Keypad()==11){    //A star key and a number 1 are pressed;

               readMon=(dataRX[5]>>shift)*10+ (dataRX[5]& 0x0F);  //BCD to decimal conversion - Hours
               readDate=(dataRX[4]>>shift)*10+(dataRX[4]& 0x0F);  //Date
               readYear=(dataRX[6]>>shift)*10+(dataRX[6]& 0x0F);  //Year

               readSec=(dataRX[0]>>shift)*10+(dataRX[0]& 0x0F);  //Seconds from the RTC
               readMins=(dataRX[1]>>shift)*10+(dataRX[1]&0x0F);  //Minutes.
               readHour=(dataRX[2]>>shift)*10+(dataRX[2]&0x0F);  //Hours.
               day=(dataRX[3]>>shift)*10+(dataRX[3]&0x0F);
               //Displays the results to the screen.
               printf("\nDate: %s %02u/%02u/%02u\n",dayOfTheWeek(day),readMon,readDate,readYear);
               printf("Time: %02u:%02u:%02u\n\n",readHour,readMins,readSec);

            }else{

                 current=rxRTC;
             }
            break;
        default:
            printf("Error! Option not available");
      }
}

/*Selects day of the Month
  *@Return: char*
  *@Param: unsigned char
  */
 char* dayOfTheWeek(int day){

     if(day==1){
         return "Monday";
     }else if(day==2){
         return "Tuesday";
     }else if(day==3){
         return "Wednesday";
     }else if(day==4){
         return "Thursday";
     }else if(day==5){
         return "Friday";
     }else if(day==6){
         return "Saturday";
     }else if(day==7){
         return "Sunday";
     }else{
         return "Error!";
     }
 }
/*Main.c - Function Execution.
 *@Param: void
 *@Return:void
 */
void main(void){

	WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;	//Stop Watchdog Timer

	pins_Init();
	init_I2C();

	for(;;){
	    dataTransferFunction();
	}
}
