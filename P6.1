/***********************************************************************************************************
 Title:        EGR 326 Lab 5
 Filename:     Part_I.c, ST7735.h, ST7735.c
 Author(s):    Kasonde Musonda
 Date:         10/09/2020
 Instructor:   Professor: Dr.Krug
 Description:  Part I of Lab 6
 Note:         ValvanoWare code was used as recommended by Dr. Krug, from
               :http://users.ece.utexas.edu/~valvano/arm/downloadmsp432.html.
************************************************************************************************************
WIRING FOR MSP432
Full Color LCD: SCK - P9.5 | SDA - P9.7 | LED - 3.3V | A0 - P9.2 | RST - P9.3 |
                VCC - 3.3V | GND - GND  | CS  - P9.4
***********************************************************************************************************/
#include "msp.h"
#include <stdio.h>
#include <ST7735.h>

/*Function Prototype*/
void Clock_Init48MHz(void);
void Clock_Init48MHzPins();

/*Configures the Flash Wait-State,HFXT to use 48MHz - Provided.
 *Crystal source to MCLK and HSMCLK
 *@Param: void
 *@Return: void
 */
void Clock_Init48MHz(void){

    // Configure Flash wait-state to 1 for both banks 0 & 1
       FLCTL->BANK0_RDCTL = (FLCTL->BANK0_RDCTL & ~(FLCTL_BANK0_RDCTL_WAIT_MASK)) |
       FLCTL_BANK0_RDCTL_WAIT_1;
       FLCTL->BANK1_RDCTL = (FLCTL->BANK0_RDCTL & ~(FLCTL_BANK0_RDCTL_WAIT_MASK)) |
       FLCTL_BANK1_RDCTL_WAIT_1;

    //Configure HFXT to use 48MHz crystal, source to MCLK & HSMCLK*
       PJ->SEL0 |= BIT2 | BIT3;                     // Configure PJ.2/3 for HFXT function
       PJ->SEL1 &= ~(BIT2 | BIT3);
       CS->KEY = CS_KEY_VAL ;                       // Unlock CS module for register access
       CS->CTL2 |= CS_CTL2_HFXT_EN | CS_CTL2_HFXTFREQ_6 | CS_CTL2_HFXTDRIVE;
      while(CS->IFG & CS_IFG_HFXTIFG)
                    CS->CLRIFG |= CS_CLRIFG_CLR_HFXTIFG;

    /* Select MCLK & HSMCLK = HFXT, no divider */
      CS->CTL1 = CS->CTL1 & ~(CS_CTL1_SELM_MASK     |
                              CS_CTL1_DIVM_MASK     |
                              CS_CTL1_SELS_MASK     |
                              CS_CTL1_DIVHS_MASK)   |
                              CS_CTL1_SELM__HFXTCLK |
                              CS_CTL1_SELS__HFXTCLK;

      CS->CTL1 = CS->CTL1 |CS_CTL1_DIVS_2;    // change the SMCLK clock speed to 12 MHz.

      CS->KEY = 0;                            // Lock CS module from unintended accesses

}

/*Signal Confirmation for the set 48MHz set
 *And 12MHz signal confirmation via the oscilloscope.
 *@Param:Void
 *@Return:Void
 */
void Clock_Init48MHzPins(){
    P4->DIR |= BIT3 | BIT4;
    P4->SEL0 |=BIT3 | BIT4; // Output MCLK
    P4->SEL1 &= ~(BIT3 | BIT4);
}
/*
 *Main Function - Program Execution.
 */
void main(void){
	WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;	// stop watchdog timer

	Clock_Init48MHz();
	Clock_Init48MHzPins();

    ST7735_InitR(INITR_BLACKTAB);
    ST7735_FillScreen(ST7735_BLACK);
    ST7735_SetCursor(8,8);
    ST7735_OutString("EGR 326\n");

	while(1){}
}
