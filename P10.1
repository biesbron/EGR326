/**************************************************************************
 Title:        EGR 326 Lab # 10
 Filename:     Part_I.c, ST7735.h, ST7735.c, image.h
 Author(s):    Kasonde Musonda
 Date:         11/12/2020
 Instructor:   Professor: Dr.Krug
 Description:  Exercise involving the watch dog timer.
 Note:         ValvanoWare code was used as recommended by Dr. Krug, from
               :http://users.ece.utexas.edu/~valvano/arm/downloadmsp432.html.
****************************************************************************/
#include "msp.h"
#include "ST7735.h"
#include "image.h"
#include "string.h"

#define BUTTON P6   //Macro definition
#define WHITE  BIT5

/*Global Variables*/
int reset=0;
int count=0;
char countArray [2];

/*Function Prototypes*/
void init(void);
void Clock_Init48MHz(void);
void systick_init(void);
void watchDog_Init(void);
void toString(int n, char s[]);
void backwards(char s[]);
void flashTime(void);
void PORT4_IRQHandler(void);
uint8_t DebounceSwitch(void);

/*Initialization Function
 *@Param:  void
 *@Return: void
 */
void init(void){

  BUTTON->SEL0 &= ~WHITE;   //Black and White buttons setup.
  BUTTON->SEL1 &= ~WHITE;   //BIT4 - Black Button - BIT5--White button.
  BUTTON->DIR  &= ~WHITE;   //setting bits 4 and 5 as inputs
  BUTTON->REN  |= WHITE;    //enabling pull up resistors
  BUTTON->OUT  |= WHITE;
  BUTTON->IES  |= WHITE;     //high to low trigger
  BUTTON->IE   |= WHITE;     //enabling interrupts
  BUTTON->IFG = 0;           //clear flag

  NVIC_EnableIRQ(PORT6_IRQn);
  NVIC_SetPriority(PORT6_IRQn, 1); //setting P4 interrupts to have priority
}

/*Configures the Flash Wait-State,HFXT to use 48MHz - Provided.
 *Crystal source to MCLK and HSMCLK
 *@Param: void
 *@Return: void
 */
void Clock_Init48MHz(void){

    // Configure Flash wait-state to 1 for both banks 0 & 1
       FLCTL->BANK0_RDCTL = (FLCTL->BANK0_RDCTL & ~(FLCTL_BANK0_RDCTL_WAIT_MASK)) |
       FLCTL_BANK0_RDCTL_WAIT_1;
       FLCTL->BANK1_RDCTL = (FLCTL->BANK0_RDCTL & ~(FLCTL_BANK0_RDCTL_WAIT_MASK)) |
       FLCTL_BANK1_RDCTL_WAIT_1;

    //Configure HFXT to use 48MHz crystal, source to MCLK & HSMCLK*
       PJ->SEL0 |= BIT2 | BIT3;                     // Configure PJ.2/3 for HFXT function
       PJ->SEL1 &= ~(BIT2 | BIT3);
       CS->KEY = CS_KEY_VAL ;                       // Unlock CS module for register access
       CS->CTL2 |= CS_CTL2_HFXT_EN | CS_CTL2_HFXTFREQ_6 | CS_CTL2_HFXTDRIVE;
      while(CS->IFG & CS_IFG_HFXTIFG)
                    CS->CLRIFG |= CS_CLRIFG_CLR_HFXTIFG;

    /* Select MCLK & HSMCLK = HFXT, no divider */
      CS->CTL1 = CS->CTL1 & ~(CS_CTL1_SELM_MASK     |
                              CS_CTL1_DIVM_MASK     |
                              CS_CTL1_SELS_MASK     |
                              CS_CTL1_DIVHS_MASK)   |
                              CS_CTL1_SELM__HFXTCLK |
                              CS_CTL1_SELS__HFXTCLK;

      CS->CTL1 = CS->CTL1 |CS_CTL1_DIVS_2;    // change the SMCLK clock speed to 12 MHz.

      CS->KEY = 0;                            // Lock CS module from unintended accesses
}

/*SysTick Timer Init
 *@Param:  void
 *@Return: void
 */
void systick_delay(void){

   SysTick->CTRL = 0; //turning systick off
   SysTick->LOAD = 3000000-1; //setting timer value
   SysTick->VAL = 0;
   SysTick->CTRL = 7; //enable systick with interrupts
}

/*Watch Dog Timer Initialization at 2^15 overflow rate
 *at 32.768kHz
 *@Param: Void
 *@Return:void
 */
void watchDog_Init(void){

    WDT_A->CTL = 0x5A24;        //ACLK as clock source,
    CS->KEY = CS_KEY_VAL;       //Password render before division by 4 to amount to 4s.
    CS->CTL1 |= CS_CTL1_DIVA_4; //Division by 4.
}

/*Parses integer values to strings
 *@param: int, char array.
 *@Return:void
 */
void toString(int n, char s[]){

    int i, sign;
    if ((sign = n) < 0)  //record sign.
        n = -n;          // make n positive.
        i = 0;
    do{       /* generate digits in reverse order */
        s[i++] = n % 10 + '0';   /* get next digit */
      } while ((n /= 10) > 0);     /* delete it */
   if (sign < 0)
        s[i++] = '-';
        s[i] = '\0';

   backwards(s);
}

/*Function reverses the printing sequence of a given RPM.
 *@Param: char
 *@Return: void
 */
void backwards(char s[]){

    int i, j;
    char c;
 for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
        c = s[i];
        s[i] = s[j];
        s[j] = c;
    }
}

/*Displays time to the LCD using functions from
 *Daniel Valvano
 *@Return: void
 *@Param:  void
 */
void flashTime(void){
    count++;
    toString(count, countArray);
    ST7735_SetCursor(10,8);   //Ravs per minute displayed to the LCDcount = 0;//resetWD
    ST7735_OutString(countArray);
}

/*Port 4 IRQ Handler
 *@Param:  void
 *@Return: void
 */
void PORT6_IRQHandler(void){
    if(BUTTON->IFG & WHITE){
        reset=1;
     }
    BUTTON->IFG = 0;
}

/*Ganselle Deobunce Function professor provided
 *@Param: void
 *@Return:void
 */
uint8_t DebounceSwitch(void){

    static uint16_t State1 = 0;
     State1=(State1<<1) | (BUTTON->IN & WHITE)>>1 | 0xf000;
     if(State1==0xf800)return 1;

     return 0;
}

/*Main Function - Program Execution
 *@Param:  void
 *@Return: void
 */
void main(void){
   watchDog_Init(); //Method Invocation.
   init();
   Clock_Init48MHz();

   /*LCD Initialization*/
   ST7735_InitR(INITR_GREENTAB);
   Output_On();
   ST7735_DrawBitmap(4,160,Kilmonger,120,160); //Splash screen for 4 seconds.

   _delay_cycles(30000000);

   ST7735_FillScreen(ST7735_BLACK);
   ST7735_SetCursor(4,1);                      //Prints to the screen
   ST7735_OutString("KICK THAT DOG!\n");

   NVIC->ISER[0] = 1 << ((WDT_A_IRQn) & 31);
   __enable_irq();

   while(1){
       flashTime();
       _delay_cycles(30000000);

       if((reset==1)){
           WDT_A->CTL = 0x5A08;
       }
       reset=0;
       WDT_A->CTL = 0x5A24;

   }
}
