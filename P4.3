/****************************************************************
  * Lab One:     Interfacing a keypad and rotary encoder with the
  *              MSP432 - Part 3
  * Author:      Kasonde Musonda
  * Date:        10/02/2020
  * Professor:   Dr. Brian Krug
  * Description: Merging the keypad and the rotary encoder and Led
  *              lights.
  ****************************************************************/
#include "msp.h"
#include <stdio.h>

#define KEYPAD P4         //Define Macros
#define BANK   0x7F
#define PORT   P2        //Port register on MSP
#define CLK    BIT7      //ClOCK PIN from encoder
#define DT     BIT6      //DT PIN from encoder
#define BUT    P3        //Switch on the encoder.
#define SW     BIT0      //Pin on the MSP
#define BLUE   BIT6      //Blue led light
#define GREEN  BIT7;     //Green led light

#define BLUE_OFF BUT->OUT &= ~BIT6;
#define BLUE_ON  BUT->OUT |= BIT6;
#define GREEN_ON   BUT->OUT |= BIT7;
#define GREEN_OFF  BUT->OUT &= ~BIT7;

volatile uint8_t flag=0;    //Flag for when a button is pressed
volatile int CW;          //Counter for the clockwise direction.
volatile int CCW;         //Counter for the anti-clockwise direction.
int userKey;             //Used to print to console.

/*Function prototype*/
void setPins(void);
void setInterrupts(void);
int  Read_Keypad(void);
void PORT2_IRQHandler(void);
void PORT3_IRQHandler(void);
void delay_Micro(int micro);

/*
 * Pin Declaration and Instantiation
 * @Param:void
 * @Return:void
 */
void setPins(){

 KEYPAD->SEL0 &= ~BANK;     //sets all buttons from keypad to input.
 KEYPAD->SEL1 &= ~BANK;
 KEYPAD->DIR &= ~BANK;
 KEYPAD->REN |=  BANK;
 KEYPAD->OUT |=  BANK;

 PORT->SEL0 &= ~(CLK);      //Clock Pin setup with Interrupts.
 PORT->SEL1 &= ~(CLK);
 PORT->DIR &=  ~(CLK);
 PORT->REN |=   (CLK);
 PORT->OUT |=   (CLK);

 PORT->SEL0 &= ~(DT);      //DT Pin setup with Interrupts.
 PORT->SEL1 &= ~(DT);
 PORT->DIR &=  ~(DT);
 PORT->REN |=   (DT);
 PORT->OUT |=   (DT);

 BUT->SEL0 &= ~(SW);     //GPIO set up.
 BUT->SEL1 &= ~(SW);     //BIT0 - SW(Pushdown)
 BUT->DIR &=  ~(SW);
 BUT->REN |=   (SW);
 BUT->OUT |=   (SW);

 BUT->SEL0 &= ~BLUE;     /*Configures P3.6 as GPIO.*/
 BUT->SEL1 &= ~BLUE;
 BUT->DIR |=   BLUE;        /*Sets P3.6 as output.*/

 BUT->SEL0 &= ~GREEN;     /*Configures P3.6 as GPIO.*/
 BUT->SEL1 &= ~GREEN;
 BUT->DIR |=   GREEN;        /*Sets P3.6 as output.*/


 SysTick -> CTRL = 0;      //Disable systick during step
 SysTick -> LOAD = 0x00FFFFFF;   //max reload value
 SysTick -> VAL = 0; //clears it
 SysTick -> CTRL = 0x00000005;   //enables systick 3MHz no interrupts
}

/*interrupt set up function for
 * the Pushbutton and ClK pins
 * @Param:void
 * @return:void
 */
void setInterrupts(){

 PORT->IES &= ~CLK;    //Interrupt setup for the clock pin
 PORT->IE  |=  CLK;
 PORT->IFG &= ~CLK;

 PORT->IES &= ~DT;
 PORT->IE |=   DT;
 PORT->IFG &= ~DT;

 BUT->IES &= ~SW;   //Interrupt set up for the pushbutton - SW
 BUT->IE  |=  SW;
 BUT->IFG &= ~SW;

 /*Interrupt Enable*/
 NVIC_EnableIRQ(PORT2_IRQn);
 NVIC_EnableIRQ(PORT3_IRQn);

 NVIC_SetPriority(PORT2_IRQn, 2);
 NVIC_SetPriority(PORT3_IRQn, 1);
}

/*
 *This function checks for a button press on the keypad
 *and returns an integer to the main function
 *to which button was pressed.
 *@Return: uint8_t
 *@Param: void
 */
int Read_Keypad(void){

 uint8_t i = 0; //variable initialization

 for(i=0; i<=2; i++){  //cycles through columns on keypad (code from lecture slides)

    KEYPAD->DIR |= (0x01 << i);
    KEYPAD->OUT &= ~(0x01 << i);

   delay_Micro(10);  //Signal settles!


  if(!(KEYPAD->IN & BIT3)){  //checks if button in row 0 is pressed

      if(i==0){
          while(!(KEYPAD->IN & BIT3)){}
          return 1;
      }
      if(i==1){
          while(!(KEYPAD->IN & BIT3)){}
          return 2;
      }
      if(i==2){
          while(!(KEYPAD->IN & BIT3)){}
          return 3;
      }
  }

  if(!(KEYPAD->IN & BIT4)){     //Checks row 2 for button push.

       if(i==0){
           while(!(KEYPAD->IN & BIT4)){}
           return 4;
       }
       if(i==1){
           while(!(KEYPAD->IN & BIT4)){}
           return 5;
       }
       if(i==2){
           while(!(KEYPAD->IN & BIT4)){}
           return 6;
       }
  }
  if(!(KEYPAD->IN & BIT5)){ //Checks Row 3 for button push.

       if(i==0){
           while(!(KEYPAD->IN & BIT5)){}
           return 7;
       }
       if(i==1){
           while(!(KEYPAD->IN & BIT5)){}
           return 8;
       }
       if(i==2){
           while(!(KEYPAD->IN & BIT5)){}
           return 9;
       }
  }
  if(!(KEYPAD->IN & BIT6)){ //Check row 4 for button push.

       if(i==0){
           while(!(KEYPAD->IN & BIT6)){}
           return 0;
       }
       if(i==1){
           while(!(KEYPAD->IN & BIT6)){}
           return 0;
       }
       if(i==2){
           while(!(KEYPAD->IN & BIT6)){}
           return 0;
       }

       }
      KEYPAD->DIR &= ~(0x01 << i); //turns columns back to high input state
      KEYPAD->OUT |= (0x01 << i);
  }

   return 100;
}

/*
 * Interrupt Handler for PORT2
 * @param:void
 * @return:void
 */
void PORT2_IRQHandler(void){

if((PORT->IFG & CLK)){

    if(PORT->IES & CLK){//rising edge
      if(PORT->IN & DT) //direction count incremented respectively
          CW=CW+1;
      else
          CCW=CCW+1;

    } else if(!(PORT->IES & CLK)){//falling edge
      if(PORT->IN & DT)//direction count incremented respectively
          CCW =CCW+1;
      else
          CW=CW+1;
    }
   }
PORT->IFG = 0;//clears flag
}

/*
 * Interrupt Handler for PORT3 - Pushbutton
 * @param:void
 * @return:void
 */
void PORT3_IRQHandler(){

      if(BUT->IFG & SW){   //Button pushed
           printf("Please enter a number between 0-9\n");
           printf("%d\n",CCW);
           printf("%d\n",CW);
           CCW =0;          //Variable reset after console print.
           CW=0;
           BLUE_OFF;
           GREEN_OFF;
           userKey=0;
      }
  BUT->IFG = 0;              //Clears interrupt and local variables.
}

/*
 * Delay in milliseconds using SysTick Timer
 */
void delay_Micro(int micro){
 SysTick->LOAD = (3*micro)-1;
 SysTick->VAL = 0;
 while((SysTick->CTRL & 0x10000)==0){}
}

/*
 * Main Method
 */
void main(void){

 WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;  // stop watchdog timer

  setPins();
  setInterrupts();

  BLUE_OFF;
  GREEN_OFF;

  printf("Please enter a number between 0-9:\n");

  while(1){
      userKey=Read_Keypad();

        if(userKey != 100){

         printf("Entered:%d\n",userKey);

        }

       if(userKey == (CW-CCW)){  //Clockwise turns equals entered number.
           BLUE_ON;
           GREEN_OFF;
       }else if(userKey == (CW-CCW)){
           BLUE_OFF;
           GREEN_ON;
       }else{
           BLUE_OFF;
           GREEN_OFF;
       }
    }
}
