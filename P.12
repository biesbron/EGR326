/**********************************************
 Lab 12: Light Sense with the A/D Converter.

 This program detects ambient light intensity
 and set screen light intensity.

 Author:    Kasonde Musonda
 Filename:  Lab12.c
 Date:      11/23/2020
**********Hardware Connection RTC**************/
//Photo Resistor - P5.5
//LED Light      - P2.7
//GRND           - GRND
/**********************************************/
#include "msp.h"
#include  "stdio.h"

#define PHOTOPORT P5    //Photo Resistor Port.
#define PHOTOPIN  BIT5
#define LEDPORT   P2    //LED Port
#define LEDPIN    BIT7

/*Function Phototype*/
void pins_ADC_Init(void);
void systick_Init(void);
void delay_Ms(uint16_t delay);
void pulseWidthSetup(void);

/*Initialization of pins P5.5 and P3.3
 *P5.5-Analog to Digital Converter pin
 *P3.3-GPIO for  LED Connection
 *@Param: void
 *@Return:void
 */
void pins_ADC_Init(){
   PHOTOPORT->SEL0 |= PHOTOPIN; //Photo resistor initialization
   PHOTOPORT->SEL1 |= PHOTOPIN;

   LEDPORT->SEL0 |=  LEDPIN;    //LED Port and Pin initialization - Timer_A0 connected to P2.7
   LEDPORT->SEL1 &= ~LEDPIN;
   LEDPORT->DIR  |=  LEDPIN;    //setting bits 0 as outputs
   LEDPORT->OUT  &= ~LEDPIN;    //starting the bit as low

   ADC14->CTL0 &= ~0x00000002;  //Disable ADC14ENC during config.
   ADC14->CTL0 |=  0x04200210;  //S/H Pulse Mode, SMCLK, 16 Sample clocks
   ADC14->CTL1  =  0x00000030;  //14 bit resolution
   ADC14->CTL1  =  0x00000000;  //Selecting ADC14CSTARTADDx mem0 REGISTER
   ADC14->MCTL[0]= 0X00000000;  //ADC14INCHx=0 for mem[0]
   ADC14->MCTL[0]=ADC14_MCTLN_INCH_0;
   ADC14->CTL0 |=  0x00000002;  //Enable ADC14ENC, start the ADC after Confinguration.
}

/*Systick_Initialization - counts to max and resets to zero
 *@Param: void
 *@Return:void
 */
void systick_Init(void){
   SysTick->CTRL = 0;          //Systick Timer initalization
   SysTick->LOAD = 0x00FFFFFF;
   SysTick->VAL = 0;
   SysTick->CTRL = 5;
}

/*Systick_Delay in milliseconds
 *@Param: uint16_t
 *@Return:void
 */
void delay_Ms(uint16_t delay){
   SysTick->LOAD = ((delay*3000)-1);
   SysTick->VAL = 0;
   while((SysTick->CTRL & 0x00010000)==0); //Wait till flags is off.
}

/*Pulse Width Modulation - connected to Timer_A0
 *@Param: void
 *@Return:void
 */
void pulseWidthSetup(void){
   TIMER_A0->CCR[0] = 50000-1;  //Period at a frequency ->60Hz Ambient Light
   TIMER_A0->CCR[4] = 500;      //Duty Cycle 100% 50000 500 = 1%
   TIMER_A0->CCTL[4]= 0xE0;     //CCR4 reset/set mode TIMER_A_CCTLN_OUTMODE_7
   TIMER_A0->CTL    = 0x0214;   //SMCLK, count up, clear TAOR register
}
/*Main Function - Function execution
 *@Param: void
 *@Return:void
 */
void main(void){
	WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;  // stop watchdog timer.

	float nADC,brightness;  //Local Variables.
	static volatile uint16_t sample;

	pins_ADC_Init();  //Method invocation
	systick_Init();
	pulseWidthSetup();

	while(1){
	    ADC14->CTL0 |= 1;               //Start Conversion.
	    while((!ADC14->IFGR0 & BIT0));  //Wait for conversion to complete.
	    sample = ADC14->MEM[0];         //Gets the data from the ADC
	    nADC = (sample *3.3)/16384;

	    delay_Ms(500);
	    printf("Value is:\n\t%d\n\t%f\n",sample,nADC);
	    brightness=(nADC/3.3) * 50000;

	    TIMER_A0->CCR[4] = brightness;

	}
}
